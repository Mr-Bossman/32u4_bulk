
usb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  00000b4c  00000be0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000023d  0080014e  0080014e  00000c2e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000217d  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001025  00000000  00000000  00002f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017e3  00000000  00000000  00003f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  00005720  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000962  00000000  00000000  00005984  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000185b  00000000  00000000  000062e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b8  00000000  00000000  00007b41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__ctors_end>
   4:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
   8:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
   c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  10:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  14:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  18:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  1c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  20:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  24:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  28:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__vector_10>
  2c:	0c 94 8f 04 	jmp	0x91e	; 0x91e <__vector_11>
  30:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  34:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  38:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  3c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  40:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  44:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  48:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  4c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  50:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  54:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  58:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  5c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  60:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  64:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  68:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  6c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  70:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  74:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  78:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  7c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  80:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  84:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  88:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  8c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  90:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  94:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  98:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  9c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  a0:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  a4:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  a8:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
  ac:	37 02       	muls	r19, r23
  ae:	dc 01       	movw	r26, r24
  b0:	dc 01       	movw	r26, r24
  b2:	3e 02       	muls	r19, r30
  b4:	dc 01       	movw	r26, r24
  b6:	dc 01       	movw	r26, r24
  b8:	dc 01       	movw	r26, r24
  ba:	dc 01       	movw	r26, r24
  bc:	dc 01       	movw	r26, r24
  be:	dc 01       	movw	r26, r24
  c0:	dc 01       	movw	r26, r24
  c2:	dc 01       	movw	r26, r24
  c4:	dc 01       	movw	r26, r24
  c6:	dc 01       	movw	r26, r24
  c8:	dc 01       	movw	r26, r24
  ca:	dc 01       	movw	r26, r24
  cc:	dc 01       	movw	r26, r24
  ce:	dc 01       	movw	r26, r24
  d0:	50 02       	muls	r21, r16
  d2:	dc 01       	movw	r26, r24
  d4:	dc 01       	movw	r26, r24
  d6:	dc 01       	movw	r26, r24
  d8:	dc 01       	movw	r26, r24
  da:	dc 01       	movw	r26, r24
  dc:	dc 01       	movw	r26, r24
  de:	dc 01       	movw	r26, r24
  e0:	62 02       	muls	r22, r18
  e2:	dc 01       	movw	r26, r24
  e4:	dc 01       	movw	r26, r24
  e6:	dc 01       	movw	r26, r24
  e8:	dc 01       	movw	r26, r24
  ea:	dc 01       	movw	r26, r24
  ec:	dc 01       	movw	r26, r24
  ee:	dc 01       	movw	r26, r24
  f0:	dc 01       	movw	r26, r24
  f2:	7b 02       	muls	r23, r27
  f4:	dc 01       	movw	r26, r24
  f6:	8d 02       	muls	r24, r29
  f8:	dc 01       	movw	r26, r24
  fa:	dc 01       	movw	r26, r24
  fc:	9f 02       	muls	r25, r31
  fe:	dc 01       	movw	r26, r24
 100:	eb 01       	movw	r28, r22

00000102 <__trampolines_end>:
 102:	09 02       	muls	r16, r25
 104:	20 00       	.word	0x0020	; ????
 106:	01 01       	movw	r0, r2
 108:	00 80       	ld	r0, Z
 10a:	32 09       	sbc	r19, r2
 10c:	04 00       	.word	0x0004	; ????
 10e:	00 02       	muls	r16, r16
 110:	08 06       	cpc	r0, r24
 112:	50 00       	.word	0x0050	; ????
 114:	07 05       	cpc	r16, r7
 116:	02 02       	muls	r16, r18
 118:	20 00       	.word	0x0020	; ????
 11a:	00 07       	cpc	r16, r16
 11c:	05 81       	ldd	r16, Z+5	; 0x05
 11e:	02 20       	and	r0, r2
	...

00000122 <device_descriptor>:
 122:	12 01 00 02 00 00 00 20 fe 13 00 43 00 01 01 02     ....... ...C....
 132:	03 01                                               ..

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	da e0       	ldi	r29, 0x0A	; 10
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61

00000140 <__do_copy_data>:
 140:	11 e0       	ldi	r17, 0x01	; 1
 142:	a0 e0       	ldi	r26, 0x00	; 0
 144:	b1 e0       	ldi	r27, 0x01	; 1
 146:	ec e4       	ldi	r30, 0x4C	; 76
 148:	fb e0       	ldi	r31, 0x0B	; 11
 14a:	02 c0       	rjmp	.+4      	; 0x150 <__do_copy_data+0x10>
 14c:	05 90       	lpm	r0, Z+
 14e:	0d 92       	st	X+, r0
 150:	ae 34       	cpi	r26, 0x4E	; 78
 152:	b1 07       	cpc	r27, r17
 154:	d9 f7       	brne	.-10     	; 0x14c <__do_copy_data+0xc>

00000156 <__do_clear_bss>:
 156:	23 e0       	ldi	r18, 0x03	; 3
 158:	ae e4       	ldi	r26, 0x4E	; 78
 15a:	b1 e0       	ldi	r27, 0x01	; 1
 15c:	01 c0       	rjmp	.+2      	; 0x160 <.do_clear_bss_start>

0000015e <.do_clear_bss_loop>:
 15e:	1d 92       	st	X+, r1

00000160 <.do_clear_bss_start>:
 160:	ab 38       	cpi	r26, 0x8B	; 139
 162:	b2 07       	cpc	r27, r18
 164:	e1 f7       	brne	.-8      	; 0x15e <.do_clear_bss_loop>
 166:	0e 94 2e 01 	call	0x25c	; 0x25c <main>
 16a:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <_exit>

0000016e <__bad_interrupt>:
 16e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000172 <STR_read>:
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	08 95       	ret

00000178 <STR_write>:
		_delay_loop_2(_tx_delay);
		b >>= 1;
	}
	PORTC |= mask;
	_delay_loop_2(_tx_delay);
	sei();
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	08 95       	ret

0000017e <Send>:
 17e:	f8 94       	cli
 180:	46 98       	cbi	0x08, 6	; 8
 182:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__data_end>
 186:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <__data_end+0x1>
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <Send+0xc>
 18e:	80 fd       	sbrc	r24, 0
 190:	55 c0       	rjmp	.+170    	; 0x23c <Send+0xbe>
 192:	46 98       	cbi	0x08, 6	; 8
 194:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__data_end>
 198:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <__data_end+0x1>
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <Send+0x1e>
 1a0:	86 95       	lsr	r24
 1a2:	80 fd       	sbrc	r24, 0
 1a4:	59 c0       	rjmp	.+178    	; 0x258 <Send+0xda>
 1a6:	46 98       	cbi	0x08, 6	; 8
 1a8:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__data_end>
 1ac:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <__data_end+0x1>
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <Send+0x32>
 1b4:	86 95       	lsr	r24
 1b6:	80 fd       	sbrc	r24, 0
 1b8:	4d c0       	rjmp	.+154    	; 0x254 <Send+0xd6>
 1ba:	46 98       	cbi	0x08, 6	; 8
 1bc:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__data_end>
 1c0:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <__data_end+0x1>
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <Send+0x46>
 1c8:	86 95       	lsr	r24
 1ca:	80 fd       	sbrc	r24, 0
 1cc:	41 c0       	rjmp	.+130    	; 0x250 <Send+0xd2>
 1ce:	46 98       	cbi	0x08, 6	; 8
 1d0:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__data_end>
 1d4:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <__data_end+0x1>
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <Send+0x5a>
 1dc:	86 95       	lsr	r24
 1de:	80 fd       	sbrc	r24, 0
 1e0:	35 c0       	rjmp	.+106    	; 0x24c <Send+0xce>
 1e2:	46 98       	cbi	0x08, 6	; 8
 1e4:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__data_end>
 1e8:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <__data_end+0x1>
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <Send+0x6e>
 1f0:	86 95       	lsr	r24
 1f2:	80 fd       	sbrc	r24, 0
 1f4:	29 c0       	rjmp	.+82     	; 0x248 <Send+0xca>
 1f6:	46 98       	cbi	0x08, 6	; 8
 1f8:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__data_end>
 1fc:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <__data_end+0x1>
 200:	31 97       	sbiw	r30, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <Send+0x82>
 204:	86 95       	lsr	r24
 206:	80 fd       	sbrc	r24, 0
 208:	1d c0       	rjmp	.+58     	; 0x244 <Send+0xc6>
 20a:	46 98       	cbi	0x08, 6	; 8
 20c:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__data_end>
 210:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <__data_end+0x1>
 214:	31 97       	sbiw	r30, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <Send+0x96>
 218:	86 95       	lsr	r24
 21a:	91 f0       	breq	.+36     	; 0x240 <Send+0xc2>
 21c:	46 9a       	sbi	0x08, 6	; 8
 21e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
 222:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <__data_end+0x1>
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <Send+0xa8>
 22a:	46 9a       	sbi	0x08, 6	; 8
 22c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__data_end>
 230:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <__data_end+0x1>
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <Send+0xb6>
 238:	78 94       	sei
 23a:	08 95       	ret
 23c:	46 9a       	sbi	0x08, 6	; 8
 23e:	aa cf       	rjmp	.-172    	; 0x194 <Send+0x16>
 240:	46 98       	cbi	0x08, 6	; 8
 242:	ed cf       	rjmp	.-38     	; 0x21e <Send+0xa0>
 244:	46 9a       	sbi	0x08, 6	; 8
 246:	e2 cf       	rjmp	.-60     	; 0x20c <Send+0x8e>
 248:	46 9a       	sbi	0x08, 6	; 8
 24a:	d6 cf       	rjmp	.-84     	; 0x1f8 <Send+0x7a>
 24c:	46 9a       	sbi	0x08, 6	; 8
 24e:	ca cf       	rjmp	.-108    	; 0x1e4 <Send+0x66>
 250:	46 9a       	sbi	0x08, 6	; 8
 252:	be cf       	rjmp	.-132    	; 0x1d0 <Send+0x52>
 254:	46 9a       	sbi	0x08, 6	; 8
 256:	b2 cf       	rjmp	.-156    	; 0x1bc <Send+0x3e>
 258:	46 9a       	sbi	0x08, 6	; 8
 25a:	a6 cf       	rjmp	.-180    	; 0x1a8 <Send+0x2a>

0000025c <main>:
}
void nl(){
	Send('\n');
	Send('\r');
}
int main(int argc, char** argv) {
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	cd b7       	in	r28, 0x3d	; 61
 262:	de b7       	in	r29, 0x3e	; 62
 264:	d2 50       	subi	r29, 0x02	; 2
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	f8 94       	cli
 26a:	de bf       	out	0x3e, r29	; 62
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	cd bf       	out	0x3d, r28	; 61
	PORTC |= (1<<6);
 270:	46 9a       	sbi	0x08, 6	; 8
	DDRC |= ((1 << 7) | (1 << 6));
 272:	87 b1       	in	r24, 0x07	; 7
 274:	80 6c       	ori	r24, 0xC0	; 192
 276:	87 b9       	out	0x07, r24	; 7
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 278:	80 e8       	ldi	r24, 0x80	; 128
 27a:	95 e0       	ldi	r25, 0x05	; 5
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	f8 94       	cli
 280:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
 284:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
 288:	0f be       	out	0x3f, r0	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28a:	2f ef       	ldi	r18, 0xFF	; 255
 28c:	31 ee       	ldi	r19, 0xE1	; 225
 28e:	94 e0       	ldi	r25, 0x04	; 4
 290:	21 50       	subi	r18, 0x01	; 1
 292:	30 40       	sbci	r19, 0x00	; 0
 294:	90 40       	sbci	r25, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <main+0x34>
 298:	00 c0       	rjmp	.+0      	; 0x29a <main+0x3e>
 29a:	00 00       	nop
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	f8 94       	cli
 2a2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
 2a6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
 2aa:	0f be       	out	0x3f, r0	; 63
	return 0;
}
volatile uint16_t _tx_delay = 0;

void initSerial(){
	_tx_delay = 0;
 2ac:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <__data_end+0x1>
 2b0:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end>
	uint16_t bit_delay = (F_CPU / 1200) / 4;
	if (bit_delay > 15 / 4)
	_tx_delay = bit_delay - (15 / 4);
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	9d e0       	ldi	r25, 0x0D	; 13
 2b8:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <__data_end+0x1>
 2bc:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__data_end>
	DDRC |= ((1 << 7) | (1 << 6));
	clock_prescale_set(clock_div_32);
	_delay_ms(100);
	clock_prescale_set(clock_div_1);
	initSerial();
	MSD_Prepare();
 2c0:	0e 94 a5 01 	call	0x34a	; 0x34a <MSD_Prepare>
	Send((num&0xf) + (((num&0xf)>9)?'W':'0'));
	Send(',');
	Send(' ');
}
void nl(){
	Send('\n');
 2c4:	8a e0       	ldi	r24, 0x0A	; 10
 2c6:	0e 94 bf 00 	call	0x17e	; 0x17e <Send>
	Send('\r');
 2ca:	8d e0       	ldi	r24, 0x0D	; 13
 2cc:	0e 94 bf 00 	call	0x17e	; 0x17e <Send>
	_delay_ms(100);
	clock_prescale_set(clock_div_1);
	initSerial();
	MSD_Prepare();
	nl();
	usb_init();
 2d0:	0e 94 30 04 	call	0x860	; 0x860 <usb_init>
	while (!get_usb_config_status()) {
 2d4:	0e 94 58 04 	call	0x8b0	; 0x8b0 <get_usb_config_status>
 2d8:	81 11       	cpse	r24, r1
 2da:	15 c0       	rjmp	.+42     	; 0x306 <main+0xaa>
		PORTC |= (1 << 7);
 2dc:	47 9a       	sbi	0x08, 7	; 8
 2de:	ef ef       	ldi	r30, 0xFF	; 255
 2e0:	f1 ee       	ldi	r31, 0xE1	; 225
 2e2:	24 e0       	ldi	r18, 0x04	; 4
 2e4:	e1 50       	subi	r30, 0x01	; 1
 2e6:	f0 40       	sbci	r31, 0x00	; 0
 2e8:	20 40       	sbci	r18, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <main+0x88>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0x92>
 2ee:	00 00       	nop
		_delay_ms(100);
		PORTC &= ~(1 << 7);
 2f0:	47 98       	cbi	0x08, 7	; 8
 2f2:	3f ef       	ldi	r19, 0xFF	; 255
 2f4:	81 ee       	ldi	r24, 0xE1	; 225
 2f6:	94 e0       	ldi	r25, 0x04	; 4
 2f8:	31 50       	subi	r19, 0x01	; 1
 2fa:	80 40       	sbci	r24, 0x00	; 0
 2fc:	90 40       	sbci	r25, 0x00	; 0
 2fe:	e1 f7       	brne	.-8      	; 0x2f8 <main+0x9c>
 300:	00 c0       	rjmp	.+0      	; 0x302 <main+0xa6>
 302:	00 00       	nop
 304:	e7 cf       	rjmp	.-50     	; 0x2d4 <main+0x78>
	Send((num&0xf) + (((num&0xf)>9)?'W':'0'));
	Send(',');
	Send(' ');
}
void nl(){
	Send('\n');
 306:	8a e0       	ldi	r24, 0x0A	; 10
 308:	0e 94 bf 00 	call	0x17e	; 0x17e <Send>
	Send('\r');
 30c:	8d e0       	ldi	r24, 0x0D	; 13
 30e:	0e 94 bf 00 	call	0x17e	; 0x17e <Send>
		_delay_ms(100);
	}
		nl();

	uint16_t ucLen = 0;
	uint8_t ucData[512] = {0};
 312:	8e 01       	movw	r16, r28
 314:	0f 5f       	subi	r16, 0xFF	; 255
 316:	1f 4f       	sbci	r17, 0xFF	; 255
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	92 e0       	ldi	r25, 0x02	; 2
 31c:	f8 01       	movw	r30, r16
 31e:	9c 01       	movw	r18, r24
 320:	11 92       	st	Z+, r1
 322:	21 50       	subi	r18, 0x01	; 1
 324:	30 40       	sbci	r19, 0x00	; 0
 326:	e1 f7       	brne	.-8      	; 0x320 <main+0xc4>
	while(1){
		do{
			MSD_transmit();
 328:	0e 94 66 03 	call	0x6cc	; 0x6cc <MSD_transmit>
		}while(!usb_data());
 32c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <usb_data>
 330:	88 23       	and	r24, r24
 332:	d1 f3       	breq	.-12     	; 0x328 <main+0xcc>
		ucLen = usb_read(ucData,sizeof(ucData));
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	72 e0       	ldi	r23, 0x02	; 2
 338:	c8 01       	movw	r24, r16
 33a:	0e 94 02 04 	call	0x804	; 0x804 <usb_read>
		MSD_recive(ucData, ucLen);
 33e:	68 2f       	mov	r22, r24
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	c8 01       	movw	r24, r16
 344:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <MSD_recive>
	}
 348:	ef cf       	rjmp	.-34     	; 0x328 <main+0xcc>

0000034a <MSD_Prepare>:
void MSD_TxCSW()
{
	uint8_t ucBR = sizeof(csw);

	usb_send((uint8_t*)&csw, ucBR);
	eTxStage = txsIdle;
 34a:	85 e5       	ldi	r24, 0x55	; 85
 34c:	93 e5       	ldi	r25, 0x53	; 83
 34e:	a2 e4       	ldi	r26, 0x42	; 66
 350:	b3 e5       	ldi	r27, 0x53	; 83
 352:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <csw>
 356:	90 93 7e 03 	sts	0x037E, r25	; 0x80037e <csw+0x1>
 35a:	a0 93 7f 03 	sts	0x037F, r26	; 0x80037f <csw+0x2>
 35e:	b0 93 80 03 	sts	0x0380, r27	; 0x800380 <csw+0x3>
 362:	08 95       	ret

00000364 <MSD_PareseCBW>:
 364:	0f 93       	push	r16
 366:	1f 93       	push	r17
 368:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <cbw+0x4>
 36c:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <cbw+0x5>
 370:	a0 91 64 03 	lds	r26, 0x0364	; 0x800364 <cbw+0x6>
 374:	b0 91 65 03 	lds	r27, 0x0365	; 0x800365 <cbw+0x7>
 378:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <csw+0x4>
 37c:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <csw+0x5>
 380:	a0 93 83 03 	sts	0x0383, r26	; 0x800383 <csw+0x6>
 384:	b0 93 84 03 	sts	0x0384, r27	; 0x800384 <csw+0x7>
 388:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <uiRxBytes+0x1>
 38c:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <uiRxBytes>
 390:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <csw+0x8>
 394:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <csw+0x9>
 398:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <csw+0xa>
 39c:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <csw+0xb>
 3a0:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <csw+0xc>
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <eTxStage>
 3aa:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <cbw+0xf>
 3ae:	8e 2f       	mov	r24, r30
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	8b 32       	cpi	r24, 0x2B	; 43
 3b4:	91 05       	cpc	r25, r1
 3b6:	50 f0       	brcs	.+20     	; 0x3cc <MSD_PareseCBW+0x68>
 3b8:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <ucSize+0x1>
 3bc:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <ucSize>
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <csw+0xc>
 3c6:	1f 91       	pop	r17
 3c8:	0f 91       	pop	r16
 3ca:	08 95       	ret
 3cc:	fc 01       	movw	r30, r24
 3ce:	ea 5a       	subi	r30, 0xAA	; 170
 3d0:	ff 4f       	sbci	r31, 0xFF	; 255
 3d2:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__tablejump2__>
 3d6:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <eTxStage>
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <eRxStage>
 3e0:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <ucSize+0x1>
 3e4:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <ucSize>
 3e8:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <cbw+0x16>
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	98 2f       	mov	r25, r24
 3f0:	88 27       	eor	r24, r24
 3f2:	20 91 75 03 	lds	r18, 0x0375	; 0x800375 <cbw+0x17>
 3f6:	82 0f       	add	r24, r18
 3f8:	91 1d       	adc	r25, r1
 3fa:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <uiBlockNum+0x1>
 3fe:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <uiBlockNum>
 402:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <cbw+0x11>
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	a0 e0       	ldi	r26, 0x00	; 0
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	38 2f       	mov	r19, r24
 40e:	22 27       	eor	r18, r18
 410:	11 27       	eor	r17, r17
 412:	00 27       	eor	r16, r16
 414:	40 91 70 03 	lds	r20, 0x0370	; 0x800370 <cbw+0x12>
 418:	50 e0       	ldi	r21, 0x00	; 0
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	da 01       	movw	r26, r20
 420:	99 27       	eor	r25, r25
 422:	88 27       	eor	r24, r24
 424:	80 0f       	add	r24, r16
 426:	91 1f       	adc	r25, r17
 428:	a2 1f       	adc	r26, r18
 42a:	b3 1f       	adc	r27, r19
 42c:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <cbw+0x14>
 430:	82 0f       	add	r24, r18
 432:	91 1d       	adc	r25, r1
 434:	a1 1d       	adc	r26, r1
 436:	b1 1d       	adc	r27, r1
 438:	20 91 71 03 	lds	r18, 0x0371	; 0x800371 <cbw+0x13>
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	32 2f       	mov	r19, r18
 440:	22 27       	eor	r18, r18
 442:	82 0f       	add	r24, r18
 444:	93 1f       	adc	r25, r19
 446:	a1 1d       	adc	r26, r1
 448:	b1 1d       	adc	r27, r1
 44a:	19 e0       	ldi	r17, 0x09	; 9
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	aa 1f       	adc	r26, r26
 452:	bb 1f       	adc	r27, r27
 454:	1a 95       	dec	r17
 456:	d1 f7       	brne	.-12     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 458:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <ulAddr>
 45c:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <ulAddr+0x1>
 460:	a0 93 54 03 	sts	0x0354, r26	; 0x800354 <ulAddr+0x2>
 464:	b0 93 55 03 	sts	0x0355, r27	; 0x800355 <ulAddr+0x3>
 468:	1f 91       	pop	r17
 46a:	0f 91       	pop	r16
 46c:	08 95       	ret
 46e:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <ucSize+0x1>
 472:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <ucSize>
 476:	1f 91       	pop	r17
 478:	0f 91       	pop	r16
 47a:	08 95       	ret
 47c:	82 e1       	ldi	r24, 0x12	; 18
 47e:	e4 e2       	ldi	r30, 0x24	; 36
 480:	f1 e0       	ldi	r31, 0x01	; 1
 482:	a0 e5       	ldi	r26, 0x50	; 80
 484:	b1 e0       	ldi	r27, 0x01	; 1
 486:	01 90       	ld	r0, Z+
 488:	0d 92       	st	X+, r0
 48a:	8a 95       	dec	r24
 48c:	e1 f7       	brne	.-8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 48e:	82 e1       	ldi	r24, 0x12	; 18
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <ucSize+0x1>
 496:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <ucSize>
 49a:	1f 91       	pop	r17
 49c:	0f 91       	pop	r16
 49e:	08 95       	ret
 4a0:	84 e2       	ldi	r24, 0x24	; 36
 4a2:	e0 e0       	ldi	r30, 0x00	; 0
 4a4:	f1 e0       	ldi	r31, 0x01	; 1
 4a6:	a0 e5       	ldi	r26, 0x50	; 80
 4a8:	b1 e0       	ldi	r27, 0x01	; 1
 4aa:	01 90       	ld	r0, Z+
 4ac:	0d 92       	st	X+, r0
 4ae:	8a 95       	dec	r24
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4b2:	84 e2       	ldi	r24, 0x24	; 36
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <ucSize+0x1>
 4ba:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <ucSize>
 4be:	1f 91       	pop	r17
 4c0:	0f 91       	pop	r16
 4c2:	08 95       	ret
 4c4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <usb_mode_sense>
 4c8:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <usb_mode_sense+0x1>
 4cc:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <usb_mode_sense+0x2>
 4d0:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <usb_mode_sense+0x3>
 4d4:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <ucDataPBP>
 4d8:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <ucDataPBP+0x1>
 4dc:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <ucDataPBP+0x2>
 4e0:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <ucDataPBP+0x3>
 4e4:	84 e0       	ldi	r24, 0x04	; 4
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <ucSize+0x1>
 4ec:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <ucSize>
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	08 95       	ret
 4f6:	8c e0       	ldi	r24, 0x0C	; 12
 4f8:	e2 e4       	ldi	r30, 0x42	; 66
 4fa:	f1 e0       	ldi	r31, 0x01	; 1
 4fc:	a0 e5       	ldi	r26, 0x50	; 80
 4fe:	b1 e0       	ldi	r27, 0x01	; 1
 500:	01 90       	ld	r0, Z+
 502:	0d 92       	st	X+, r0
 504:	8a 95       	dec	r24
 506:	e1 f7       	brne	.-8      	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 508:	8c e0       	ldi	r24, 0x0C	; 12
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <ucSize+0x1>
 510:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <ucSize>
 514:	1f 91       	pop	r17
 516:	0f 91       	pop	r16
 518:	08 95       	ret
 51a:	88 e0       	ldi	r24, 0x08	; 8
 51c:	ea e3       	ldi	r30, 0x3A	; 58
 51e:	f1 e0       	ldi	r31, 0x01	; 1
 520:	a0 e5       	ldi	r26, 0x50	; 80
 522:	b1 e0       	ldi	r27, 0x01	; 1
 524:	01 90       	ld	r0, Z+
 526:	0d 92       	st	X+, r0
 528:	8a 95       	dec	r24
 52a:	e1 f7       	brne	.-8      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
 52c:	88 e0       	ldi	r24, 0x08	; 8
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <ucSize+0x1>
 534:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <ucSize>
 538:	1f 91       	pop	r17
 53a:	0f 91       	pop	r16
 53c:	08 95       	ret
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	92 e0       	ldi	r25, 0x02	; 2
 542:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <ucSize+0x1>
 546:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <ucSize>
 54a:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <cbw+0x16>
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	38 2f       	mov	r19, r24
 552:	22 27       	eor	r18, r18
 554:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <cbw+0x17>
 558:	89 2f       	mov	r24, r25
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	01 97       	sbiw	r24, 0x01	; 1
 55e:	82 0f       	add	r24, r18
 560:	93 1f       	adc	r25, r19
 562:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <uiBlockNum+0x1>
 566:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <uiBlockNum>
 56a:	60 91 6f 03 	lds	r22, 0x036F	; 0x80036f <cbw+0x11>
 56e:	86 2f       	mov	r24, r22
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	a0 e0       	ldi	r26, 0x00	; 0
 574:	b0 e0       	ldi	r27, 0x00	; 0
 576:	78 2f       	mov	r23, r24
 578:	66 27       	eor	r22, r22
 57a:	55 27       	eor	r21, r21
 57c:	44 27       	eor	r20, r20
 57e:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <cbw+0x12>
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	a0 e0       	ldi	r26, 0x00	; 0
 586:	b0 e0       	ldi	r27, 0x00	; 0
 588:	dc 01       	movw	r26, r24
 58a:	99 27       	eor	r25, r25
 58c:	88 27       	eor	r24, r24
 58e:	84 0f       	add	r24, r20
 590:	95 1f       	adc	r25, r21
 592:	a6 1f       	adc	r26, r22
 594:	b7 1f       	adc	r27, r23
 596:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <cbw+0x14>
 59a:	82 0f       	add	r24, r18
 59c:	91 1d       	adc	r25, r1
 59e:	a1 1d       	adc	r26, r1
 5a0:	b1 1d       	adc	r27, r1
 5a2:	20 91 71 03 	lds	r18, 0x0371	; 0x800371 <cbw+0x13>
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	32 2f       	mov	r19, r18
 5aa:	22 27       	eor	r18, r18
 5ac:	82 0f       	add	r24, r18
 5ae:	93 1f       	adc	r25, r19
 5b0:	a1 1d       	adc	r26, r1
 5b2:	b1 1d       	adc	r27, r1
 5b4:	bc 01       	movw	r22, r24
 5b6:	cd 01       	movw	r24, r26
 5b8:	59 e0       	ldi	r21, 0x09	; 9
 5ba:	66 0f       	add	r22, r22
 5bc:	77 1f       	adc	r23, r23
 5be:	88 1f       	adc	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	5a 95       	dec	r21
 5c4:	d1 f7       	brne	.-12     	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
 5c6:	60 93 52 03 	sts	0x0352, r22	; 0x800352 <ulAddr>
 5ca:	70 93 53 03 	sts	0x0353, r23	; 0x800353 <ulAddr+0x1>
 5ce:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <ulAddr+0x2>
 5d2:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <ulAddr+0x3>
 5d6:	80 e5       	ldi	r24, 0x50	; 80
 5d8:	91 e0       	ldi	r25, 0x01	; 1
 5da:	1f 91       	pop	r17
 5dc:	0f 91       	pop	r16
 5de:	0c 94 b9 00 	jmp	0x172	; 0x172 <STR_read>

000005e2 <MSD_recive>:
}

void MSD_recive(uint8_t* ucData, uint16_t ucLen){
 5e2:	0f 93       	push	r16
 5e4:	1f 93       	push	r17
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	9c 01       	movw	r18, r24
 5ec:	eb 01       	movw	r28, r22
	if (eRxStage == rxsCBW)
 5ee:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <eRxStage>
 5f2:	99 23       	and	r25, r25
 5f4:	39 f0       	breq	.+14     	; 0x604 <MSD_recive+0x22>
	MSD_RxCBW(ucData, ucLen);
	else if (eRxStage == rxsData)
 5f6:	91 30       	cpi	r25, 0x01	; 1
 5f8:	f1 f0       	breq	.+60     	; 0x636 <MSD_recive+0x54>
	MSD_RxData(ucData, ucLen);
}
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	1f 91       	pop	r17
 600:	0f 91       	pop	r16
 602:	08 95       	ret
	}
}

void MSD_RxCBW(uint8_t* ucData, uint16_t ucLen)
{
	memcpy((uint8_t*)&cbw + uiRxBytes, ucData, ucLen);
 604:	00 91 5a 03 	lds	r16, 0x035A	; 0x80035a <uiRxBytes>
 608:	10 91 5b 03 	lds	r17, 0x035B	; 0x80035b <uiRxBytes+0x1>
 60c:	ab 01       	movw	r20, r22
 60e:	b9 01       	movw	r22, r18
 610:	c8 01       	movw	r24, r16
 612:	82 5a       	subi	r24, 0xA2	; 162
 614:	9c 4f       	sbci	r25, 0xFC	; 252
 616:	0e 94 9b 05 	call	0xb36	; 0xb36 <memcpy>
	uiRxBytes+= ucLen;
 61a:	c0 0f       	add	r28, r16
 61c:	d1 1f       	adc	r29, r17
 61e:	d0 93 5b 03 	sts	0x035B, r29	; 0x80035b <uiRxBytes+0x1>
 622:	c0 93 5a 03 	sts	0x035A, r28	; 0x80035a <uiRxBytes>
	if (uiRxBytes == sizeof(USB_MSD_CBW))
 626:	6f 97       	sbiw	r28, 0x1f	; 31
 628:	41 f7       	brne	.-48     	; 0x5fa <MSD_recive+0x18>
void MSD_recive(uint8_t* ucData, uint16_t ucLen){
	if (eRxStage == rxsCBW)
	MSD_RxCBW(ucData, ucLen);
	else if (eRxStage == rxsData)
	MSD_RxData(ucData, ucLen);
}
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	1f 91       	pop	r17
 630:	0f 91       	pop	r16
void MSD_RxCBW(uint8_t* ucData, uint16_t ucLen)
{
	memcpy((uint8_t*)&cbw + uiRxBytes, ucData, ucLen);
	uiRxBytes+= ucLen;
	if (uiRxBytes == sizeof(USB_MSD_CBW))
		MSD_PareseCBW();
 632:	0c 94 b2 01 	jmp	0x364	; 0x364 <MSD_PareseCBW>
}

void MSD_RxData(uint8_t* ucData, uint16_t ucLen)
{
	memcpy((uint8_t*)&ucDataPBP + uiRxBytes, ucData, ucLen);
 636:	00 91 5a 03 	lds	r16, 0x035A	; 0x80035a <uiRxBytes>
 63a:	10 91 5b 03 	lds	r17, 0x035B	; 0x80035b <uiRxBytes+0x1>
 63e:	ab 01       	movw	r20, r22
 640:	b9 01       	movw	r22, r18
 642:	c8 01       	movw	r24, r16
 644:	80 5b       	subi	r24, 0xB0	; 176
 646:	9e 4f       	sbci	r25, 0xFE	; 254
 648:	0e 94 9b 05 	call	0xb36	; 0xb36 <memcpy>
	uiRxBytes+=ucLen;
 64c:	c0 0f       	add	r28, r16
 64e:	d1 1f       	adc	r29, r17

	if (512 == uiRxBytes)
 650:	c1 15       	cp	r28, r1
 652:	82 e0       	ldi	r24, 0x02	; 2
 654:	d8 07       	cpc	r29, r24
 656:	49 f0       	breq	.+18     	; 0x66a <MSD_recive+0x88>
}

void MSD_RxData(uint8_t* ucData, uint16_t ucLen)
{
	memcpy((uint8_t*)&ucDataPBP + uiRxBytes, ucData, ucLen);
	uiRxBytes+=ucLen;
 658:	d0 93 5b 03 	sts	0x035B, r29	; 0x80035b <uiRxBytes+0x1>
 65c:	c0 93 5a 03 	sts	0x035A, r28	; 0x80035a <uiRxBytes>
void MSD_recive(uint8_t* ucData, uint16_t ucLen){
	if (eRxStage == rxsCBW)
	MSD_RxCBW(ucData, ucLen);
	else if (eRxStage == rxsData)
	MSD_RxData(ucData, ucLen);
}
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	1f 91       	pop	r17
 666:	0f 91       	pop	r16
 668:	08 95       	ret
	uiRxBytes+=ucLen;

	if (512 == uiRxBytes)
	{

		uiRxBytes = 0;
 66a:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <uiRxBytes+0x1>
 66e:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <uiRxBytes>
		STR_write(ucDataPBP,ulAddr);
 672:	60 91 52 03 	lds	r22, 0x0352	; 0x800352 <ulAddr>
 676:	70 91 53 03 	lds	r23, 0x0353	; 0x800353 <ulAddr+0x1>
 67a:	80 e5       	ldi	r24, 0x50	; 80
 67c:	91 e0       	ldi	r25, 0x01	; 1
 67e:	0e 94 bc 00 	call	0x178	; 0x178 <STR_write>
		ulAddr+=512;
 682:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <ulAddr>
 686:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <ulAddr+0x1>
 68a:	a0 91 54 03 	lds	r26, 0x0354	; 0x800354 <ulAddr+0x2>
 68e:	b0 91 55 03 	lds	r27, 0x0355	; 0x800355 <ulAddr+0x3>
 692:	9e 5f       	subi	r25, 0xFE	; 254
 694:	af 4f       	sbci	r26, 0xFF	; 255
 696:	bf 4f       	sbci	r27, 0xFF	; 255
 698:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <ulAddr>
 69c:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <ulAddr+0x1>
 6a0:	a0 93 54 03 	sts	0x0354, r26	; 0x800354 <ulAddr+0x2>
 6a4:	b0 93 55 03 	sts	0x0355, r27	; 0x800355 <ulAddr+0x3>
		uiBlockNum--;
 6a8:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <uiBlockNum>
 6ac:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <uiBlockNum+0x1>
 6b0:	01 97       	sbiw	r24, 0x01	; 1
 6b2:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <uiBlockNum+0x1>
 6b6:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <uiBlockNum>
		if (uiBlockNum == 0x00)
 6ba:	89 2b       	or	r24, r25
 6bc:	09 f0       	breq	.+2      	; 0x6c0 <MSD_recive+0xde>
 6be:	9d cf       	rjmp	.-198    	; 0x5fa <MSD_recive+0x18>
		{
			eRxStage = rxsCBW;
 6c0:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <eRxStage>
			eTxStage = txsCSW;
 6c4:	82 e0       	ldi	r24, 0x02	; 2
 6c6:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <eTxStage>
void MSD_recive(uint8_t* ucData, uint16_t ucLen){
	if (eRxStage == rxsCBW)
	MSD_RxCBW(ucData, ucLen);
	else if (eRxStage == rxsData)
	MSD_RxData(ucData, ucLen);
}
 6ca:	97 cf       	rjmp	.-210    	; 0x5fa <MSD_recive+0x18>

000006cc <MSD_transmit>:
void MSD_transmit(){
	if (eTxStage == txsData)
 6cc:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <eTxStage>
 6d0:	81 30       	cpi	r24, 0x01	; 1
 6d2:	19 f0       	breq	.+6      	; 0x6da <MSD_transmit+0xe>
	MSD_TxData();
	if (eTxStage == txsCSW)
 6d4:	82 30       	cpi	r24, 0x02	; 2
 6d6:	19 f1       	breq	.+70     	; 0x71e <MSD_transmit+0x52>
 6d8:	08 95       	ret

void MSD_TxData()
{
	uint8_t ucBR = 32;
	uint8_t res = 0x00;
	unsigned int ucChunkSize = ucSize - ucPos;
 6da:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <ucPos>
 6de:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <ucPos+0x1>
 6e2:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <ucSize>
 6e6:	30 91 57 03 	lds	r19, 0x0357	; 0x800357 <ucSize+0x1>
 6ea:	28 1b       	sub	r18, r24
 6ec:	39 0b       	sbc	r19, r25

	if (ucChunkSize < 32)
 6ee:	20 32       	cpi	r18, 0x20	; 32
 6f0:	31 05       	cpc	r19, r1
 6f2:	08 f0       	brcs	.+2      	; 0x6f6 <MSD_transmit+0x2a>
 6f4:	44 c0       	rjmp	.+136    	; 0x77e <MSD_transmit+0xb2>
	{
		if (uiBlockNum)
 6f6:	40 91 50 03 	lds	r20, 0x0350	; 0x800350 <uiBlockNum>
 6fa:	50 91 51 03 	lds	r21, 0x0351	; 0x800351 <uiBlockNum+0x1>
 6fe:	41 15       	cp	r20, r1
 700:	51 05       	cpc	r21, r1
 702:	b1 f4       	brne	.+44     	; 0x730 <MSD_transmit+0x64>
			ucBR = ucChunkSize;
			res = 1;
		}
	}
	
	if (ucBR)
 704:	21 11       	cpse	r18, r1
 706:	4d c0       	rjmp	.+154    	; 0x7a2 <MSD_transmit+0xd6>
		usb_send((uint8_t*)&ucDataPBP[ucPos], ucBR);
	}

	if (res)
	{
		ucPos = ucSize = 0x00;
 708:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <ucSize+0x1>
 70c:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <ucSize>
 710:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <ucPos+0x1>
 714:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <ucPos>
		eTxStage = txsCSW;
 718:	82 e0       	ldi	r24, 0x02	; 2
 71a:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <eTxStage>

void MSD_TxCSW()
{
	uint8_t ucBR = sizeof(csw);

	usb_send((uint8_t*)&csw, ucBR);
 71e:	6d e0       	ldi	r22, 0x0D	; 13
 720:	70 e0       	ldi	r23, 0x00	; 0
 722:	8d e7       	ldi	r24, 0x7D	; 125
 724:	93 e0       	ldi	r25, 0x03	; 3
 726:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <usb_send>
	eTxStage = txsIdle;
 72a:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <eTxStage>
void MSD_transmit(){
	if (eTxStage == txsData)
	MSD_TxData();
	if (eTxStage == txsCSW)
	MSD_TxCSW();
 72e:	08 95       	ret

	if (ucChunkSize < 32)
	{
		if (uiBlockNum)
		{
			ucPos = 0x00;
 730:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <ucPos+0x1>
 734:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <ucPos>
			ulAddr += 512;
 738:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <ulAddr>
 73c:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <ulAddr+0x1>
 740:	a0 91 54 03 	lds	r26, 0x0354	; 0x800354 <ulAddr+0x2>
 744:	b0 91 55 03 	lds	r27, 0x0355	; 0x800355 <ulAddr+0x3>
 748:	bc 01       	movw	r22, r24
 74a:	cd 01       	movw	r24, r26
 74c:	7e 5f       	subi	r23, 0xFE	; 254
 74e:	8f 4f       	sbci	r24, 0xFF	; 255
 750:	9f 4f       	sbci	r25, 0xFF	; 255
 752:	60 93 52 03 	sts	0x0352, r22	; 0x800352 <ulAddr>
 756:	70 93 53 03 	sts	0x0353, r23	; 0x800353 <ulAddr+0x1>
 75a:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <ulAddr+0x2>
 75e:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <ulAddr+0x3>
			uiBlockNum--;
 762:	41 50       	subi	r20, 0x01	; 1
 764:	51 09       	sbc	r21, r1
 766:	50 93 51 03 	sts	0x0351, r21	; 0x800351 <uiBlockNum+0x1>
 76a:	40 93 50 03 	sts	0x0350, r20	; 0x800350 <uiBlockNum>
			STR_read(ucDataPBP,ulAddr);
 76e:	80 e5       	ldi	r24, 0x50	; 80
 770:	91 e0       	ldi	r25, 0x01	; 1
 772:	0e 94 b9 00 	call	0x172	; 0x172 <STR_read>
 776:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <ucPos>
 77a:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <ucPos+0x1>
		}
	}
	
	if (ucBR)
	{
		usb_send((uint8_t*)&ucDataPBP[ucPos], ucBR);
 77e:	60 e2       	ldi	r22, 0x20	; 32
 780:	70 e0       	ldi	r23, 0x00	; 0
 782:	80 5b       	subi	r24, 0xB0	; 176
 784:	9e 4f       	sbci	r25, 0xFE	; 254
 786:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <usb_send>
		ucPos = ucSize = 0x00;
		eTxStage = txsCSW;
	}
	else
	{
		ucPos+= ucBR;
 78a:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <ucPos>
 78e:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <ucPos+0x1>
 792:	80 96       	adiw	r24, 0x20	; 32
 794:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <ucPos+0x1>
 798:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <ucPos>
 79c:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <eTxStage>
 7a0:	99 cf       	rjmp	.-206    	; 0x6d4 <MSD_transmit+0x8>
 7a2:	b9 01       	movw	r22, r18
 7a4:	77 27       	eor	r23, r23
		}
	}
	
	if (ucBR)
	{
		usb_send((uint8_t*)&ucDataPBP[ucPos], ucBR);
 7a6:	80 5b       	subi	r24, 0xB0	; 176
 7a8:	9e 4f       	sbci	r25, 0xFE	; 254
 7aa:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <usb_send>
 7ae:	ac cf       	rjmp	.-168    	; 0x708 <MSD_transmit+0x3c>

000007b0 <usb_send>:
	0x20, 0x00,      // wMaxPacketSize - The size of the keyboard banks
	0x00       // wInterval - Poll for new data 1000/s, or once every ms
};

uint8_t usb_send(uint8_t * in, uint16_t count) {
	if (!usb_config_status)
 7b0:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <usb_config_status>
 7b4:	21 11       	cpse	r18, r1
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <usb_send+0xc>
	return -1;  // Why are you even trying
 7b8:	8f ef       	ldi	r24, 0xFF	; 255
	while(len--)
		UEDATX = *in++;
	UEINTX = 0b00111010;
	sei();
	return count-len;
}
 7ba:	08 95       	ret
};

uint8_t usb_send(uint8_t * in, uint16_t count) {
	if (!usb_config_status)
	return -1;  // Why are you even trying
	cli();
 7bc:	f8 94       	cli
	UENUM = ENDPOINT_NUM_IN;
 7be:	21 e0       	ldi	r18, 0x01	; 1
 7c0:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>

	uint16_t len = count;
	while (!(UEINTX & (1 << RWAL)));  // Wait for banks to be ready
 7c4:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 7c8:	25 ff       	sbrs	r18, 5
 7ca:	fc cf       	rjmp	.-8      	; 0x7c4 <usb_send+0x14>
	while(len--)
 7cc:	61 15       	cp	r22, r1
 7ce:	71 05       	cpc	r23, r1
 7d0:	51 f0       	breq	.+20     	; 0x7e6 <usb_send+0x36>
 7d2:	fc 01       	movw	r30, r24
 7d4:	9c 01       	movw	r18, r24
 7d6:	26 0f       	add	r18, r22
 7d8:	37 1f       	adc	r19, r23
		UEDATX = *in++;
 7da:	91 91       	ld	r25, Z+
 7dc:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
	cli();
	UENUM = ENDPOINT_NUM_IN;

	uint16_t len = count;
	while (!(UEINTX & (1 << RWAL)));  // Wait for banks to be ready
	while(len--)
 7e0:	e2 17       	cp	r30, r18
 7e2:	f3 07       	cpc	r31, r19
 7e4:	d1 f7       	brne	.-12     	; 0x7da <usb_send+0x2a>
		UEDATX = *in++;
	UEINTX = 0b00111010;
 7e6:	8a e3       	ldi	r24, 0x3A	; 58
 7e8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	sei();
 7ec:	78 94       	sei
	return count-len;
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	86 0f       	add	r24, r22
 7f2:	08 95       	ret

000007f4 <usb_data>:
}
uint8_t usb_data(){
	cli();
 7f4:	f8 94       	cli
	UENUM = ENDPOINT_NUM_OUT;
 7f6:	82 e0       	ldi	r24, 0x02	; 2
 7f8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
	uint8_t len = UEBCLX;
 7fc:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
	sei();
 800:	78 94       	sei
	return len;
}
 802:	08 95       	ret

00000804 <usb_read>:
uint8_t usb_read(uint8_t* dat, uint16_t count)
{
 804:	fc 01       	movw	r30, r24
	if (!usb_config_status)
 806:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <usb_config_status>
 80a:	81 11       	cpse	r24, r1
 80c:	02 c0       	rjmp	.+4      	; 0x812 <usb_read+0xe>
	return -1;  // Why are you even trying
 80e:	8f ef       	ldi	r24, 0xFF	; 255
		*data++ = UEDATX;
	if(!UEBCLX)
		UEINTX = 0x6B;
	sei();
	return count;
}
 810:	08 95       	ret
}
uint8_t usb_read(uint8_t* dat, uint16_t count)
{
	if (!usb_config_status)
	return -1;  // Why are you even trying
	cli();
 812:	f8 94       	cli
	UENUM = ENDPOINT_NUM_OUT;
 814:	82 e0       	ldi	r24, 0x02	; 2
 816:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
	while (!(UEINTX & (1 << RWAL)));
 81a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 81e:	85 ff       	sbrs	r24, 5
 820:	fc cf       	rjmp	.-8      	; 0x81a <usb_read+0x16>
	uint16_t len = UEBCLX;
 822:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	62 17       	cp	r22, r18
 82a:	73 07       	cpc	r23, r19
 82c:	b8 f0       	brcs	.+46     	; 0x85c <usb_read+0x58>
	if(count < len){
		len = count;
	}
	count = len;
	volatile uint8_t * data = dat;
	while(len--)
 82e:	21 15       	cp	r18, r1
 830:	31 05       	cpc	r19, r1
 832:	51 f0       	breq	.+20     	; 0x848 <usb_read+0x44>
 834:	af 01       	movw	r20, r30
 836:	42 0f       	add	r20, r18
 838:	53 1f       	adc	r21, r19
		*data++ = UEDATX;
 83a:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 83e:	90 83       	st	Z, r25
 840:	31 96       	adiw	r30, 0x01	; 1
	if(count < len){
		len = count;
	}
	count = len;
	volatile uint8_t * data = dat;
	while(len--)
 842:	e4 17       	cp	r30, r20
 844:	f5 07       	cpc	r31, r21
 846:	c9 f7       	brne	.-14     	; 0x83a <usb_read+0x36>
		*data++ = UEDATX;
	if(!UEBCLX)
 848:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 84c:	81 11       	cpse	r24, r1
 84e:	03 c0       	rjmp	.+6      	; 0x856 <usb_read+0x52>
		UEINTX = 0x6B;
 850:	8b e6       	ldi	r24, 0x6B	; 107
 852:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	sei();
 856:	78 94       	sei
	return count;
 858:	82 2f       	mov	r24, r18
 85a:	08 95       	ret
 85c:	9b 01       	movw	r18, r22
 85e:	e7 cf       	rjmp	.-50     	; 0x82e <usb_read+0x2a>

00000860 <usb_init>:
}
int usb_init() {
	cli();  // Global Interrupt Disable
 860:	f8 94       	cli

	UHWCON |= (1 << UVREGE);  // Enable USB Pads Regulator
 862:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
 866:	81 60       	ori	r24, 0x01	; 1
 868:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>

	PLLCSR |= 0x12;  // Configure to use 16mHz oscillator
 86c:	89 b5       	in	r24, 0x29	; 41
 86e:	82 61       	ori	r24, 0x12	; 18
 870:	89 bd       	out	0x29, r24	; 41

	while (!(PLLCSR & (1 << PLOCK)))
 872:	09 b4       	in	r0, 0x29	; 41
 874:	00 fe       	sbrs	r0, 0
 876:	fd cf       	rjmp	.-6      	; 0x872 <usb_init+0x12>
	;  // Wait for PLL Lock to be achieved

	USBCON |=
 878:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
 87c:	80 69       	ori	r24, 0x90	; 144
 87e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
	(1 << USBE) | (1 << OTGPADE);  // Enable USB Controller and USB power pads
	USBCON &= ~(1 << FRZCLK);          // Unfreeze the clock
 882:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
 886:	8f 7d       	andi	r24, 0xDF	; 223
 888:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>

	UDCON = 0;  // FULL SPEED MODE
 88c:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>

	USBCON &= ~(1 << DETACH);  // Connect
 890:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
 894:	8e 7f       	andi	r24, 0xFE	; 254
 896:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
	UDIEN |= (1 << EORSTE) |
 89a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 89e:	8c 60       	ori	r24, 0x0C	; 12
 8a0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
	(1 << SOFE);  // Re-enable the EORSTE (End Of Reset) Interrupt so we
	// know when we can configure the control endpoint
	usb_config_status = 0;
 8a4:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <usb_config_status>
	sei();  // Global Interrupt Enable
 8a8:	78 94       	sei
	return 0;
}
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	08 95       	ret

000008b0 <get_usb_config_status>:

uint8_t get_usb_config_status() {
	return usb_config_status;
}
 8b0:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <usb_config_status>
 8b4:	08 95       	ret

000008b6 <__vector_10>:

ISR(USB_GEN_vect) {
 8b6:	1f 92       	push	r1
 8b8:	0f 92       	push	r0
 8ba:	0f b6       	in	r0, 0x3f	; 63
 8bc:	0f 92       	push	r0
 8be:	11 24       	eor	r1, r1
 8c0:	8f 93       	push	r24
 8c2:	9f 93       	push	r25
	uint8_t udint_temp = UDINT;
 8c4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	UDINT = 0;
 8c8:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>

	if (udint_temp & (1 << EORSTI)) {  // If end of reset interrupt
 8cc:	83 ff       	sbrs	r24, 3
 8ce:	12 c0       	rjmp	.+36     	; 0x8f4 <__vector_10+0x3e>
		// Configure Control Endpoint
		UENUM = 0;             // Select Endpoint 0, the default control endpoint
 8d0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
		UECONX = (1 << EPEN);  // Enable the Endpoint
 8d4:	91 e0       	ldi	r25, 0x01	; 1
 8d6:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
		UECFG0X = 0;      // Control Endpoint, OUT direction for control endpoint
 8da:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
		UECFG1X |= 0x22;  // 32 byte endpoint, 1 bank, allocate the memory
 8de:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
 8e2:	82 62       	ori	r24, 0x22	; 34
 8e4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
		usb_config_status = 0;
 8e8:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <usb_config_status>

		if (!(UESTA0X &
 8ec:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
 8f0:	87 fd       	sbrc	r24, 7
 8f2:	07 c0       	rjmp	.+14     	; 0x902 <__vector_10+0x4c>

		UEIENX =
		(1 << RXSTPE);  // Re-enable the RXSPTE (Receive Setup Packet) Interrupt
		return;
	}
}
 8f4:	9f 91       	pop	r25
 8f6:	8f 91       	pop	r24
 8f8:	0f 90       	pop	r0
 8fa:	0f be       	out	0x3f, r0	; 63
 8fc:	0f 90       	pop	r0
 8fe:	1f 90       	pop	r1
 900:	18 95       	reti
		if (!(UESTA0X &
		(1 << CFGOK))) {  // Check if endpoint configuration was successful
			return;
		}

		UERST = 1;  // Reset Endpoint
 902:	90 93 ea 00 	sts	0x00EA, r25	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
		UERST = 0;
 906:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>

		UEIENX =
 90a:	88 e0       	ldi	r24, 0x08	; 8
 90c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
		(1 << RXSTPE);  // Re-enable the RXSPTE (Receive Setup Packet) Interrupt
		return;
	}
}
 910:	9f 91       	pop	r25
 912:	8f 91       	pop	r24
 914:	0f 90       	pop	r0
 916:	0f be       	out	0x3f, r0	; 63
 918:	0f 90       	pop	r0
 91a:	1f 90       	pop	r1
 91c:	18 95       	reti

0000091e <__vector_11>:

ISR(USB_COM_vect) {
 91e:	1f 92       	push	r1
 920:	0f 92       	push	r0
 922:	0f b6       	in	r0, 0x3f	; 63
 924:	0f 92       	push	r0
 926:	11 24       	eor	r1, r1
 928:	2f 93       	push	r18
 92a:	3f 93       	push	r19
 92c:	4f 93       	push	r20
 92e:	5f 93       	push	r21
 930:	6f 93       	push	r22
 932:	7f 93       	push	r23
 934:	8f 93       	push	r24
 936:	9f 93       	push	r25
 938:	af 93       	push	r26
 93a:	bf 93       	push	r27
 93c:	ef 93       	push	r30
 93e:	ff 93       	push	r31
	UENUM = 0;
 940:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
	if (UEINTX & (1 << RXSTPI)) {
 944:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 948:	83 ff       	sbrs	r24, 3
 94a:	36 c0       	rjmp	.+108    	; 0x9b8 <__vector_11+0x9a>
		uint8_t bmRequestType = UEDATX;  // UEDATX is FIFO; see table in README
 94c:	50 91 f1 00 	lds	r21, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
		uint8_t bRequest = UEDATX;
 950:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
		uint16_t wValue = UEDATX;
 954:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
		wValue |= UEDATX << 8;
 958:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	bc 01       	movw	r22, r24
 960:	72 2b       	or	r23, r18
 962:	9b 01       	movw	r18, r22
		uint16_t wIndex = UEDATX;
 964:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
		wIndex |= UEDATX << 8;
 968:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
		uint16_t wLength = UEDATX;
 96c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
		wLength |= UEDATX << 8;
 970:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>

		UEINTX &= ~(
 974:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 978:	92 7f       	andi	r25, 0xF2	; 242
 97a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		(1 << RXSTPI) | (1 << RXOUTI) |
		(1 << TXINI));  // Handshake the Interrupts, do this after recording
		// the packet because it also clears the endpoint banks
		if (bRequest == GET_DESCRIPTOR) {
 97e:	46 30       	cpi	r20, 0x06	; 6
 980:	89 f1       	breq	.+98     	; 0x9e4 <__vector_11+0xc6>
				UEINTX &= ~(1 << TXINI);
			}
			return;
		}

		if (bRequest == SET_CONFIGURATION &&
 982:	49 30       	cpi	r20, 0x09	; 9
 984:	09 f4       	brne	.+2      	; 0x988 <__vector_11+0x6a>
 986:	79 c0       	rjmp	.+242    	; 0xa7a <__DATA_REGION_LENGTH__+0x7a>
			UERST = 0x1E;          // Reset all of the endpoints
			UERST = 0;
			return;
		}

		if (bRequest == SET_ADDRESS) {
 988:	45 30       	cpi	r20, 0x05	; 5
 98a:	09 f4       	brne	.+2      	; 0x98e <__vector_11+0x70>
 98c:	68 c0       	rjmp	.+208    	; 0xa5e <__DATA_REGION_LENGTH__+0x5e>

			UDADDR = wValue | (1 << ADDEN);  // Set the device address
			return;
		}

		if (bRequest == GET_CONFIGURATION &&
 98e:	48 30       	cpi	r20, 0x08	; 8
 990:	81 f0       	breq	.+32     	; 0x9b2 <__vector_11+0x94>
			UEDATX = usb_config_status;
			UEINTX &= ~(1 << TXINI);
			return;
		}

		if (bRequest == GET_STATUS) {
 992:	41 11       	cpse	r20, r1
 994:	bb c0       	rjmp	.+374    	; 0xb0c <__stack+0xd>
			while (!(UEINTX & (1 << TXINI)))
 996:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 99a:	80 ff       	sbrs	r24, 0
 99c:	fc cf       	rjmp	.-8      	; 0x996 <__vector_11+0x78>
			;
			UEDATX = 0;
 99e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			UEDATX = 0;
 9a2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			UEINTX &= ~(1 << TXINI);
 9a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 9aa:	8e 7f       	andi	r24, 0xFE	; 254
 9ac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			return;
 9b0:	08 c0       	rjmp	.+16     	; 0x9c2 <__vector_11+0xa4>

			UDADDR = wValue | (1 << ADDEN);  // Set the device address
			return;
		}

		if (bRequest == GET_CONFIGURATION &&
 9b2:	50 38       	cpi	r21, 0x80	; 128
 9b4:	09 f4       	brne	.+2      	; 0x9b8 <__vector_11+0x9a>
 9b6:	96 c0       	rjmp	.+300    	; 0xae4 <__DATA_REGION_LENGTH__+0xe4>
			return;
		}

	}

	UECONX |= (1 << STALLRQ) |
 9b8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 9bc:	81 62       	ori	r24, 0x21	; 33
 9be:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
	(1 << EPEN);  // The host made an invalid request or there was an
 9c2:	ff 91       	pop	r31
 9c4:	ef 91       	pop	r30
 9c6:	bf 91       	pop	r27
 9c8:	af 91       	pop	r26
 9ca:	9f 91       	pop	r25
 9cc:	8f 91       	pop	r24
 9ce:	7f 91       	pop	r23
 9d0:	6f 91       	pop	r22
 9d2:	5f 91       	pop	r21
 9d4:	4f 91       	pop	r20
 9d6:	3f 91       	pop	r19
 9d8:	2f 91       	pop	r18
 9da:	0f 90       	pop	r0
 9dc:	0f be       	out	0x3f, r0	; 63
 9de:	0f 90       	pop	r0
 9e0:	1f 90       	pop	r1
 9e2:	18 95       	reti
		if (bRequest == GET_DESCRIPTOR) {
			// The Host is requesting a descriptor to enumerate the device
			const uint8_t* descriptor;
			uint8_t descriptor_length;

			if (wValue == 0x0100) {  // Is the host requesting a device descriptor?
 9e4:	21 15       	cp	r18, r1
 9e6:	71 e0       	ldi	r23, 0x01	; 1
 9e8:	37 07       	cpc	r19, r23
 9ea:	09 f4       	brne	.+2      	; 0x9ee <__vector_11+0xd0>
 9ec:	89 c0       	rjmp	.+274    	; 0xb00 <__stack+0x1>
				descriptor = device_descriptor;
				descriptor_length = pgm_read_byte(descriptor);
				} else if (wValue == 0x0200) {  // Is it asking for a configuration descriptor?
 9ee:	21 15       	cp	r18, r1
 9f0:	32 40       	sbci	r19, 0x02	; 2
 9f2:	11 f7       	brne	.-60     	; 0x9b8 <__vector_11+0x9a>
				descriptor = configuration_descriptor;
				descriptor_length =
 9f4:	e0 e2       	ldi	r30, 0x20	; 32

			if (wValue == 0x0100) {  // Is the host requesting a device descriptor?
				descriptor = device_descriptor;
				descriptor_length = pgm_read_byte(descriptor);
				} else if (wValue == 0x0200) {  // Is it asking for a configuration descriptor?
				descriptor = configuration_descriptor;
 9f6:	42 e0       	ldi	r20, 0x02	; 2
 9f8:	51 e0       	ldi	r21, 0x01	; 1
			wLength > 255 ? 255
			: wLength;  // Our endpoint is only so big; the USB Spec
			// says to truncate the response if the size
			// exceeds the size of the endpoint

			descriptor_length =
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	96 2b       	or	r25, r22
 9fe:	8f 3f       	cpi	r24, 0xFF	; 255
 a00:	91 05       	cpc	r25, r1
 a02:	19 f0       	breq	.+6      	; 0xa0a <__DATA_REGION_LENGTH__+0xa>
 a04:	10 f0       	brcs	.+4      	; 0xa0a <__DATA_REGION_LENGTH__+0xa>
 a06:	8f ef       	ldi	r24, 0xFF	; 255
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	98 2f       	mov	r25, r24
 a0c:	e8 17       	cp	r30, r24
 a0e:	08 f4       	brcc	.+2      	; 0xa12 <__DATA_REGION_LENGTH__+0x12>
 a10:	9e 2f       	mov	r25, r30
			request_length > descriptor_length
			? descriptor_length
			: request_length;  // Truncate to descriptor length at most

			while (descriptor_length > 0) {
 a12:	99 23       	and	r25, r25
 a14:	b1 f2       	breq	.-84     	; 0x9c2 <__vector_11+0xa4>
				while (!(UEINTX & (1 << TXINI)))
 a16:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 a1a:	80 ff       	sbrs	r24, 0
 a1c:	fc cf       	rjmp	.-8      	; 0xa16 <__DATA_REGION_LENGTH__+0x16>
				;  // Wait for banks to be ready for data transmission
				if (UEINTX & (1 << RXOUTI))
 a1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 a22:	82 fd       	sbrc	r24, 2
 a24:	ce cf       	rjmp	.-100    	; 0x9c2 <__vector_11+0xa4>
				return;  // If there is another packet, exit to handle it

				uint8_t thisPacket =
 a26:	69 2f       	mov	r22, r25
 a28:	91 32       	cpi	r25, 0x21	; 33
 a2a:	08 f0       	brcs	.+2      	; 0xa2e <__DATA_REGION_LENGTH__+0x2e>
 a2c:	60 e2       	ldi	r22, 0x20	; 32
 a2e:	fa 01       	movw	r30, r20
 a30:	a6 2f       	mov	r26, r22
 a32:	b0 e0       	ldi	r27, 0x00	; 0
 a34:	9a 01       	movw	r18, r20
 a36:	2a 0f       	add	r18, r26
 a38:	3b 1f       	adc	r19, r27
				: descriptor_length;  // Make sure that the packet we are
				// getting is not too big to fit in the
				// endpoint

				for (int i = 0; i < thisPacket; i++) {
					UEDATX = pgm_read_byte(
 a3a:	84 91       	lpm	r24, Z
 a3c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 a40:	31 96       	adiw	r30, 0x01	; 1
				? 32
				: descriptor_length;  // Make sure that the packet we are
				// getting is not too big to fit in the
				// endpoint

				for (int i = 0; i < thisPacket; i++) {
 a42:	2e 17       	cp	r18, r30
 a44:	3f 07       	cpc	r19, r31
 a46:	c9 f7       	brne	.-14     	; 0xa3a <__DATA_REGION_LENGTH__+0x3a>
					descriptor +
					i);  // Send the descriptor over UEDATX, use pgmspace functions
					// because the descriptors are stored in flash
				}

				descriptor_length -= thisPacket;
 a48:	96 1b       	sub	r25, r22
				descriptor += thisPacket;
 a4a:	4a 0f       	add	r20, r26
 a4c:	5b 1f       	adc	r21, r27
				UEINTX &= ~(1 << TXINI);
 a4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 a52:	8e 7f       	andi	r24, 0xFE	; 254
 a54:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			descriptor_length =
			request_length > descriptor_length
			? descriptor_length
			: request_length;  // Truncate to descriptor length at most

			while (descriptor_length > 0) {
 a58:	91 11       	cpse	r25, r1
 a5a:	dd cf       	rjmp	.-70     	; 0xa16 <__DATA_REGION_LENGTH__+0x16>
 a5c:	b2 cf       	rjmp	.-156    	; 0x9c2 <__vector_11+0xa4>
			UERST = 0;
			return;
		}

		if (bRequest == SET_ADDRESS) {
			UEINTX &= ~(1 << TXINI);
 a5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 a62:	8e 7f       	andi	r24, 0xFE	; 254
 a64:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			while (!(UEINTX & (1 << TXINI)))
 a68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 a6c:	80 ff       	sbrs	r24, 0
 a6e:	fc cf       	rjmp	.-8      	; 0xa68 <__DATA_REGION_LENGTH__+0x68>
			;  // Wait until the banks are ready to be filled

			UDADDR = wValue | (1 << ADDEN);  // Set the device address
 a70:	82 2f       	mov	r24, r18
 a72:	80 68       	ori	r24, 0x80	; 128
 a74:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
			return;
 a78:	a4 cf       	rjmp	.-184    	; 0x9c2 <__vector_11+0xa4>
				UEINTX &= ~(1 << TXINI);
			}
			return;
		}

		if (bRequest == SET_CONFIGURATION &&
 a7a:	51 11       	cpse	r21, r1
 a7c:	9d cf       	rjmp	.-198    	; 0x9b8 <__vector_11+0x9a>
		bmRequestType ==
		0) {  // Refer to USB Spec 9.4.7 - This is the configuration request
			// to place the device into address mode
			usb_config_status = wValue;
 a7e:	20 93 8a 03 	sts	0x038A, r18	; 0x80038a <usb_config_status>
			UEINTX &= ~(1 << TXINI);
 a82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 a86:	8e 7f       	andi	r24, 0xFE	; 254
 a88:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			UENUM = ENDPOINT_NUM_IN;
 a8c:	81 e0       	ldi	r24, 0x01	; 1
 a8e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			UECONX |= (1 << EPEN);
 a92:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 a96:	81 60       	ori	r24, 0x01	; 1
 a98:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
			UECFG0X = 0b10000001;  // EPTYPE Bulk 1  IN
 a9c:	81 e8       	ldi	r24, 0x81	; 129
 a9e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
			UECFG1X = 0b00110010;  // Single Bank Endpoint, 64 Bytes, allocate memory
 aa2:	82 e3       	ldi	r24, 0x32	; 50
 aa4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
			if (!(UESTA0X & (1 << CFGOK)))  usb_config_status = 0;
 aa8:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
 aac:	87 ff       	sbrs	r24, 7
 aae:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <usb_config_status>
			UENUM = ENDPOINT_NUM_OUT;
 ab2:	82 e0       	ldi	r24, 0x02	; 2
 ab4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			UECONX |= (1 << EPEN);
 ab8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 abc:	81 60       	ori	r24, 0x01	; 1
 abe:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
			UECFG0X = 0b10000000;  // EPTYPE Bulk 0 OUT
 ac2:	80 e8       	ldi	r24, 0x80	; 128
 ac4:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
			UECFG1X = 0b00110010;  // Single Bank Endpoint, 64 Bytes, allocate memory
 ac8:	82 e3       	ldi	r24, 0x32	; 50
 aca:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
			if (!(UESTA0X & (1 << CFGOK)))  usb_config_status = 0;
 ace:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
 ad2:	87 ff       	sbrs	r24, 7
 ad4:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <usb_config_status>
			UERST = 0x1E;          // Reset all of the endpoints
 ad8:	8e e1       	ldi	r24, 0x1E	; 30
 ada:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
			UERST = 0;
 ade:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
			return;
 ae2:	6f cf       	rjmp	.-290    	; 0x9c2 <__vector_11+0xa4>
		}

		if (bRequest == GET_CONFIGURATION &&
		bmRequestType == 0x80) {  // GET_CONFIGURATION is the host trying to get
			// the current config status of the device
			while (!(UEINTX & (1 << TXINI)))
 ae4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 ae8:	80 ff       	sbrs	r24, 0
 aea:	fc cf       	rjmp	.-8      	; 0xae4 <__DATA_REGION_LENGTH__+0xe4>
			;  // Wait until the banks are ready to be filled
			UEDATX = usb_config_status;
 aec:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <usb_config_status>
 af0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			UEINTX &= ~(1 << TXINI);
 af4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 af8:	8e 7f       	andi	r24, 0xFE	; 254
 afa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			return;
 afe:	61 cf       	rjmp	.-318    	; 0x9c2 <__vector_11+0xa4>
			const uint8_t* descriptor;
			uint8_t descriptor_length;

			if (wValue == 0x0100) {  // Is the host requesting a device descriptor?
				descriptor = device_descriptor;
				descriptor_length = pgm_read_byte(descriptor);
 b00:	e2 e2       	ldi	r30, 0x22	; 34
 b02:	f1 e0       	ldi	r31, 0x01	; 1
 b04:	e4 91       	lpm	r30, Z
			// The Host is requesting a descriptor to enumerate the device
			const uint8_t* descriptor;
			uint8_t descriptor_length;

			if (wValue == 0x0100) {  // Is the host requesting a device descriptor?
				descriptor = device_descriptor;
 b06:	42 e2       	ldi	r20, 0x22	; 34
 b08:	51 e0       	ldi	r21, 0x01	; 1
 b0a:	77 cf       	rjmp	.-274    	; 0x9fa <__vector_11+0xdc>
			UEDATX = 0;
			UEDATX = 0;
			UEINTX &= ~(1 << TXINI);
			return;
		}
		if(bRequest == GET_LUN){
 b0c:	4e 3f       	cpi	r20, 0xFE	; 254
 b0e:	09 f0       	breq	.+2      	; 0xb12 <__stack+0x13>
 b10:	53 cf       	rjmp	.-346    	; 0x9b8 <__vector_11+0x9a>
			while (!(UEINTX & (1 << TXINI)));
 b12:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 b16:	80 ff       	sbrs	r24, 0
 b18:	fc cf       	rjmp	.-8      	; 0xb12 <__stack+0x13>
			UEDATX = 0;
 b1a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			UEINTX &= ~(1 << TXINI);
 b1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 b22:	8e 7f       	andi	r24, 0xFE	; 254
 b24:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			return;
 b28:	4c cf       	rjmp	.-360    	; 0x9c2 <__vector_11+0xa4>

00000b2a <__tablejump2__>:
 b2a:	ee 0f       	add	r30, r30
 b2c:	ff 1f       	adc	r31, r31
 b2e:	05 90       	lpm	r0, Z+
 b30:	f4 91       	lpm	r31, Z
 b32:	e0 2d       	mov	r30, r0
 b34:	09 94       	ijmp

00000b36 <memcpy>:
 b36:	fb 01       	movw	r30, r22
 b38:	dc 01       	movw	r26, r24
 b3a:	02 c0       	rjmp	.+4      	; 0xb40 <memcpy+0xa>
 b3c:	01 90       	ld	r0, Z+
 b3e:	0d 92       	st	X+, r0
 b40:	41 50       	subi	r20, 0x01	; 1
 b42:	50 40       	sbci	r21, 0x00	; 0
 b44:	d8 f7       	brcc	.-10     	; 0xb3c <memcpy+0x6>
 b46:	08 95       	ret

00000b48 <_exit>:
 b48:	f8 94       	cli

00000b4a <__stop_program>:
 b4a:	ff cf       	rjmp	.-2      	; 0xb4a <__stop_program>
